// Generated by CoffeeScript 1.7.1
(function() {
  var HealthCheckController, Path, Settings, app, controller, express, host, logger, metrics, port, _ref, _ref1, _ref2, _ref3;

  metrics = require("metrics-sharelatex");

  metrics.initialize("tags");

  Settings = require('settings-sharelatex');

  logger = require('logger-sharelatex');

  logger.initialize("tags");

  express = require('express');

  app = express();

  controller = require("./app/js/TagsController");

  Path = require("path");

  metrics.memory.monitor(logger);

  HealthCheckController = require("./app/js/HealthCheckController");

  app.configure(function() {
    app.use(express.methodOverride());
    app.use(express.bodyParser());
    app.use(metrics.http.monitor(logger));
    return app.use(express.errorHandler());
  });

  metrics.injectMetricsRoute(app);

  app.get('/user/:user_id/tag', controller.getUserTags);

  app.post('/user/:user_id/tag', controller.createTag);

  app.put('/user/:user_id/tag', controller.updateTagUserIds);

  app.post('/user/:user_id/tag/:tag_id/rename', controller.renameTag);

  app.del('/user/:user_id/tag/:tag_id', controller.deleteTag);

  app.post('/user/:user_id/tag/:tag_id/project/:project_id', controller.addProjectToTag);

  app.post('/user/:user_id/tag/project/:project_id', controller.addProjectToTagName);

  app.del('/user/:user_id/tag/:tag_id/project/:project_id', controller.removeProjectFromTag);

  app.del('/user/:user_id/project/:project_id', controller.removeProjectFromAllTags);

  app.get('/status', function(req, res) {
    return res.send('tags sharelatex up');
  });

  app.get('/health_check', function(req, res) {
    return HealthCheckController.check(function(err) {
      if (err != null) {
        logger.err({
          err: err
        }, "error performing health check");
        return res.send(500);
      } else {
        return res.send(200);
      }
    });
  });

  app.get('*', function(req, res) {
    return res.send(404);
  });

  host = ((_ref = Settings.internal) != null ? (_ref1 = _ref.tags) != null ? _ref1.host : void 0 : void 0) || "localhost";

  port = ((_ref2 = Settings.internal) != null ? (_ref3 = _ref2.tags) != null ? _ref3.port : void 0 : void 0) || 3012;

  // module.exports = app;

  // if (!module.parent) {
    app.listen(port, host, function() {
      return logger.info("tags starting up, listening on " + host + ":" + port);
    });
  // }
  exports.main = test

  function test(params = {}) {
    const url = params.__ow_path || '/tag';
    const method = params.__ow_method || 'get';
  
    const { promisify } = require('util')
    const request = require("request")
    const reqPromise = promisify(request[method]);
  
    return (async () => {
      const result = await reqPromise({
        url: `http://${host}:${port}${url}`,
        json: params
      })
      return result
    })();
  }
}).call(this);

//# sourceMappingURL=app.map
