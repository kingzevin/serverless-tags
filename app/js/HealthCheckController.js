// Generated by CoffeeScript 1.7.1
(function() {
  var HealthCheck, ObjectId, async, buildUrl, logger, port, request, settings,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require("request");

  async = require("async");

  settings = require("settings-sharelatex");

  port = settings.internal.tags.port;

  logger = require("logger-sharelatex");

  ObjectId = require("mongojs").ObjectId;

  request = request.defaults({
    timeout: 3000
  });

  buildUrl = function(path) {
    return "http://localhost:" + port + path;
  };

  module.exports = HealthCheck = {
    check: function(callback) {
      var project_id, tagName, user_id;
      project_id = ObjectId();
      user_id = ObjectId(settings.tags.healthCheck.user_id);
      tagName = "smoke-test-tag-" + (Math.floor(Math.random() * 50));
      return request.post({
        url: buildUrl("/user/" + user_id + "/tag"),
        json: {
          name: tagName
        }
      }, function(err, res, body) {
        var tag_id;
        if (err != null) {
          logger.log("Failed executing create tag health check");
          return callback(err);
        }
        if (res.statusCode !== 200) {
          return callback(new Error("unexpected statusCode: " + res.statusCode));
        }
        if ((body != null ? body._id : void 0) == null) {
          return callback(new Error("" + tagName + " tag not created - clobbered by another health check?"));
        }
        logger.log({
          tag: body,
          user_id: user_id,
          project_id: project_id
        }, "health check created tag");
        tag_id = body._id;
        return request.post({
          url: buildUrl("/user/" + user_id + "/tag/" + tag_id + "/project/" + project_id)
        }, function(err, res, body) {
          if (err != null) {
            logger.log("Failed executing create project in tag health check");
            return callback(err);
          }
          if (res.statusCode !== 204) {
            return callback(new Error("unexpected statusCode: " + res.statusCode));
          }
          return request.get({
            url: buildUrl("/user/" + user_id + "/tag"),
            json: true
          }, function(err, res, tags) {
            var hasTag, tag, _i, _len, _ref;
            if (err != null) {
              logger.log("Failed executing list tags health check");
              return callback(err);
            }
            if (res.statusCode !== 200) {
              return callback(new Error("unexpected statusCode: " + res.statusCode));
            }
            hasTag = false;
            for (_i = 0, _len = tags.length; _i < _len; _i++) {
              tag = tags[_i];
              logger.log({
                tag: tag,
                project_id: project_id.toString()
              }, "checking tag");
              if (_ref = project_id.toString(), __indexOf.call(tag.project_ids, _ref) >= 0) {
                hasTag = true;
                break;
              }
            }
            if (!hasTag) {
              return callback(new Error("tag was not found in response"));
            }
            return request.del({
              url: buildUrl("/user/" + user_id + "/tag/" + tag_id),
              json: true
            }, function(err, res, body) {
              var otherTags;
              if (err != null) {
                logger.log("Failed executing delete tags health check");
              }
              otherTags = (function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = tags.length; _j < _len1; _j++) {
                  tag = tags[_j];
                  if (tag._id !== tag_id) {
                    _results.push(tag);
                  }
                }
                return _results;
              })();
              return HealthCheck._removeOldTags(user_id, otherTags, function() {
                return callback(err, res, body);
              });
            });
          });
        });
      });
    },
    _removeOldTags: function(user_id, tags, callback) {
      var getAge, now, oldTags, removeTag, tag;
      now = new Date();
      getAge = function(tag) {
        return now - ObjectId(tag._id).getTimestamp();
      };
      oldTags = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          tag = tags[_i];
          if (getAge(tag) > 5 * 60 * 1000) {
            _results.push(tag);
          }
        }
        return _results;
      })();
      removeTag = function(tag, cb) {
        logger.log({
          tag: tag
        }, "removing old tag");
        return request.del({
          url: buildUrl("/user/" + user_id + "/tag/" + tag._id),
          json: true
        }, function(err) {
          return cb();
        });
      };
      return async.mapSeries(oldTags.slice(0, 3), removeTag, callback);
    }
  };

}).call(this);

//# sourceMappingURL=HealthCheckController.map
