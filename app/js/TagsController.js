// Generated by CoffeeScript 1.7.1
(function() {
  var TagsRepository, logger;

  TagsRepository = require("./Repositories/Tags");

  logger = require("logger-sharelatex");

  module.exports = {
    getUserTags: function(req, res, next) {
      var user_id;
      user_id = req.params.user_id;
      logger.log({
        user_id: user_id
      }, "getting user tags");
      return TagsRepository.getUserTags(user_id, function(error, tags) {
        if (error != null) {
          return next(error);
        }
        return res.json(tags);
      });
    },
    createTag: function(req, res, next) {
      var name, user_id;
      user_id = req.params.user_id;
      name = req.body.name;
      logger.log({
        user_id: user_id,
        name: name
      }, "creating tag");
      return TagsRepository.createTag(user_id, name, function(error, tag) {
        if (error != null) {
          return next(error);
        }
        return res.json(tag);
      });
    },
    updateTagUserIds: function(req, res, next) {
      var new_user_id, old_user_id;
      old_user_id = req.params.user_id;
      new_user_id = req.body.user_id;
      logger.log({
        old_user_id: old_user_id,
        new_user_id: new_user_id
      }, "updating user_id for tags");
      return TagsRepository.updateTagUserIds(old_user_id, new_user_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    },
    addProjectToTag: function(req, res, next) {
      var project_id, tag_id, user_id, _ref;
      _ref = req.params, user_id = _ref.user_id, project_id = _ref.project_id, tag_id = _ref.tag_id;
      logger.log({
        user_id: user_id,
        project_id: project_id,
        tag_id: tag_id
      }, "adding project to tag");
      return TagsRepository.addProjectToTag(user_id, tag_id, project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    },
    addProjectToTagName: function(req, res, next) {
      var name, project_id, user_id, _ref;
      _ref = req.params, user_id = _ref.user_id, project_id = _ref.project_id;
      name = req.body.name;
      logger.log({
        user_id: user_id,
        project_id: project_id,
        name: name
      }, "adding project to tag name");
      return TagsRepository.addProjectToTagName(user_id, name, project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    },
    removeProjectFromTag: function(req, res, next) {
      var project_id, tag_id, user_id, _ref;
      _ref = req.params, user_id = _ref.user_id, project_id = _ref.project_id, tag_id = _ref.tag_id;
      logger.log({
        user_id: user_id,
        project_id: project_id,
        tag_id: tag_id
      }, "removing project from tag");
      return TagsRepository.removeProjectFromTag(user_id, tag_id, project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    },
    removeProjectFromAllTags: function(req, res, next) {
      logger.log({
        user_id: req.params.user_id,
        project_id: req.params.project_id
      }, "removing project from all tags");
      return TagsRepository.removeProjectFromAllTags(req.params.user_id, req.params.project_id, function(err, tags) {
        return res.send();
      });
    },
    renameTag: function(req, res, next) {
      var name, tag_id, user_id, _ref;
      _ref = req.params, user_id = _ref.user_id, tag_id = _ref.tag_id;
      name = req.body.name;
      logger.log({
        user_id: user_id,
        tag_id: tag_id,
        name: name
      }, "renaming tag");
      return TagsRepository.renameTag(user_id, tag_id, name, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    },
    deleteTag: function(req, res, next) {
      var tag_id, user_id, _ref;
      _ref = req.params, user_id = _ref.user_id, tag_id = _ref.tag_id;
      logger.log({
        user_id: user_id,
        tag_id: tag_id
      }, "deleting tag");
      return TagsRepository.deleteTag(user_id, tag_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.status(204).end();
      });
    }
  };

}).call(this);

//# sourceMappingURL=TagsController.map
